definitions:
  dto.CreateUserDto:
    properties:
      email:
        type: string
      plainPassword:
        type: string
      username:
        type: string
    type: object
  dto.ErrorDto:
    properties:
      error:
        type: string
    type: object
  dto.GetUUIDDto:
    properties:
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  dto.LoginDto:
    properties:
      email:
        type: string
      plainPassword:
        type: string
    type: object
  dto.TokensDto:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
info:
  contact: {}
  title: Medods Test Task API
  version: "1.0"
paths:
  /getUUID:
    get:
      consumes:
      - application/json
      operationId: get-uuid
      produces:
      - application/json
      responses:
        "200":
          description: Returns Id of current authorized user
          schema:
            $ref: '#/definitions/dto.GetUUIDDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorDto'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorDto'
      security:
      - ApiKeyAuth: []
      summary: Get user Id
  /login:
    post:
      operationId: login
      parameters:
      - description: login user
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDto'
      produces:
      - application/json
      responses: {}
      summary: Log in
  /refresh:
    post:
      operationId: token-refresh
      parameters:
      - description: refresh tokens
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.TokensDto'
      produces:
      - application/json
      responses: {}
      summary: Refresh
  /register:
    post:
      operationId: create-user
      parameters:
      - description: register user
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDto'
      produces:
      - application/json
      responses: {}
      summary: create a user
  /users/{id}:
    get:
      operationId: get-user-by-id
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a user by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
